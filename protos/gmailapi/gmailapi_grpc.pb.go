// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gmailapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GmailapiSvcClient is the client API for GmailapiSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GmailapiSvcClient interface {
	SubscribeToMail(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
}

type gmailapiSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewGmailapiSvcClient(cc grpc.ClientConnInterface) GmailapiSvcClient {
	return &gmailapiSvcClient{cc}
}

func (c *gmailapiSvcClient) SubscribeToMail(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, "/gmailapi.GmailapiSvc/subscribeToMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GmailapiSvcServer is the server API for GmailapiSvc service.
// All implementations must embed UnimplementedGmailapiSvcServer
// for forward compatibility
type GmailapiSvcServer interface {
	SubscribeToMail(context.Context, *SubscriptionRequest) (*SubscriptionResponse, error)
	mustEmbedUnimplementedGmailapiSvcServer()
}

// UnimplementedGmailapiSvcServer must be embedded to have forward compatible implementations.
type UnimplementedGmailapiSvcServer struct {
}

func (UnimplementedGmailapiSvcServer) SubscribeToMail(context.Context, *SubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToMail not implemented")
}
func (UnimplementedGmailapiSvcServer) mustEmbedUnimplementedGmailapiSvcServer() {}

// UnsafeGmailapiSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GmailapiSvcServer will
// result in compilation errors.
type UnsafeGmailapiSvcServer interface {
	mustEmbedUnimplementedGmailapiSvcServer()
}

func RegisterGmailapiSvcServer(s grpc.ServiceRegistrar, srv GmailapiSvcServer) {
	s.RegisterService(&_GmailapiSvc_serviceDesc, srv)
}

func _GmailapiSvc_SubscribeToMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmailapiSvcServer).SubscribeToMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmailapi.GmailapiSvc/subscribeToMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmailapiSvcServer).SubscribeToMail(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GmailapiSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gmailapi.GmailapiSvc",
	HandlerType: (*GmailapiSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "subscribeToMail",
			Handler:    _GmailapiSvc_SubscribeToMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/gmailapi/gmailapi.proto",
}
