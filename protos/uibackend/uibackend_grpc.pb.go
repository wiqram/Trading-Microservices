// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package uibackend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UibackendSvcClient is the client API for UibackendSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UibackendSvcClient interface {
	GetProducts(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (*ProductsResponse, error)
	GetTransactions(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error)
}

type uibackendSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewUibackendSvcClient(cc grpc.ClientConnInterface) UibackendSvcClient {
	return &uibackendSvcClient{cc}
}

func (c *uibackendSvcClient) GetProducts(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (*ProductsResponse, error) {
	out := new(ProductsResponse)
	err := c.cc.Invoke(ctx, "/demo_uibackend.UibackendSvc/getProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uibackendSvcClient) GetTransactions(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error) {
	out := new(TransactionsResponse)
	err := c.cc.Invoke(ctx, "/demo_uibackend.UibackendSvc/getTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UibackendSvcServer is the server API for UibackendSvc service.
// All implementations must embed UnimplementedUibackendSvcServer
// for forward compatibility
type UibackendSvcServer interface {
	GetProducts(context.Context, *ProductsRequest) (*ProductsResponse, error)
	GetTransactions(context.Context, *TransactionsRequest) (*TransactionsResponse, error)
	mustEmbedUnimplementedUibackendSvcServer()
}

// UnimplementedUibackendSvcServer must be embedded to have forward compatible implementations.
type UnimplementedUibackendSvcServer struct {
}

func (UnimplementedUibackendSvcServer) GetProducts(context.Context, *ProductsRequest) (*ProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedUibackendSvcServer) GetTransactions(context.Context, *TransactionsRequest) (*TransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedUibackendSvcServer) mustEmbedUnimplementedUibackendSvcServer() {}

// UnsafeUibackendSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UibackendSvcServer will
// result in compilation errors.
type UnsafeUibackendSvcServer interface {
	mustEmbedUnimplementedUibackendSvcServer()
}

func RegisterUibackendSvcServer(s grpc.ServiceRegistrar, srv UibackendSvcServer) {
	s.RegisterService(&_UibackendSvc_serviceDesc, srv)
}

func _UibackendSvc_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UibackendSvcServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo_uibackend.UibackendSvc/getProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UibackendSvcServer).GetProducts(ctx, req.(*ProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UibackendSvc_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UibackendSvcServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo_uibackend.UibackendSvc/getTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UibackendSvcServer).GetTransactions(ctx, req.(*TransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UibackendSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo_uibackend.UibackendSvc",
	HandlerType: (*UibackendSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getProducts",
			Handler:    _UibackendSvc_GetProducts_Handler,
		},
		{
			MethodName: "getTransactions",
			Handler:    _UibackendSvc_GetTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/uibackend/uibackend.proto",
}
